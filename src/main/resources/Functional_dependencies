Functional Dependencies

1)actor(username->password,role_name)

2)activity_category(id->activity_name)

3)re_rule(re_rule_code->activity_category_code,nums_points,version,status,lp_code)

4)rr_rule(rr_rule_code->reward,num_points,version,status,lp_code)

5)brand
id->name,address,join_date,user_name
name -> id, address, join_date, user_name

6)loyalty_program
id->program_name,brand_id,tier_type,state
brand_id -> id,program_name,tier_type,state

7)activities_for_loyalty_program
activity_lp_map_id->loyalty_program_code,activity_category_code
loyalty_program_code, activity_category_code->activity_lp_map_id

8)customer(id->name,phone,address,user_name)

9)tier(id-> name, points, multiplier, lp_program_id)

10)customer_redeem_activity(id -> customer_id,activity_date,redeem_lp_map_id,points)

11)customer_activity(id -> customer_id,activity_date,activity_lp_map_id, customer_redeem_activity_id,points)

12)reward_category(id -> reward_name)

13)wallet(id -> points,customer_id,loyalty_program_code)

14)customer_lp_enroll(customer_id,loyalty_program_code -> customer_id,loyalty_program_code)

15)rewards_for_loyalty_program
reward_lp_map_id->loyalty_program_code,reward_category_code,reward_count,reward_value
reward_category_code,loyalty_program_cod -> reward_lp_map_id,reward_count,reward_value

In all the above relations, all the functional dependencies are either driven by the primary key or by a candidate key.
Hence, we can conclude that all the relations are in BCNF.
